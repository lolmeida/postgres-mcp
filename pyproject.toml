[tool.poetry]
name = "postgres-mcp"
version = "0.1.0"
description = "PostgreSQL MCP - Model Context Protocol para interação de LLMs com PostgreSQL"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "postgres_mcp", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
fastmcp = "^0.1.0"
asyncpg = "^0.28.0"
pydantic = "^2.5.0"
python-dotenv = "^1.0.0"
uvicorn = {extras = ["standard"], version = "^0.23.2"}
psycopg = {extras = ["binary"], version = "^3.1.12"}
cachetools = "^5.5.2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.12.0"
black = "^23.11.0"
isort = "^5.12.0"
mypy = "^1.7.0"
pylint = "^3.0.2"
pytest-cov = "^4.1.0"
testcontainers = "^4.2.0"
testcontainers-postgres = "^4.2.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
postgres-mcp = "postgres_mcp.core.server:run_mcp"

[tool.black]
line-length = 88
target-version = ["py310"]

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
asyncio_mode = "auto" 